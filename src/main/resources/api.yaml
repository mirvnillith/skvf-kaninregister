openapi: 3.0.0
info:
  title: SKVF Kaninregister API
  description: API for managing bunnies and their owners/breeders
  version: "0.1"

tags:
  - name: BunnyRegistry
    description: Registry of bunnies and owners/breeders
    
paths:
  /login:
    post:
      tags: [BunnyRegistry]
      operationId: login
      summary: Starts an authenticated owner session
      requestBody:
        description: Owner credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
      responses:
        '200':
          description: Owner authenticated
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OwnerDTO'
        '401':
          description: Authentication failed
        '409':
          description: Already in session
          
  /logout:
    post:
      tags: [BunnyRegistry]
      operationId: logout
      summary: Ends an authenticated owner session
      responses:
        '200':
          description: Owner logged out
          
  /signOffline/{token}:
    post:
      tags: [BunnyRegistry]
      operationId: signOffline
      summary: Offline signature
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Signature details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfflineSignatureDTO'
      responses:
        '200':
          description: Signature stored
          
  /owners:
    post:
      tags: [BunnyRegistry]
      operationId: createOwner
      summary: Creates a new owner.
      requestBody:
        description: Owner to create
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/CreateOwnerDTO'
      responses:
        '200':
          description: Owner created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OwnerDTO'
        '400':
          description: Invalid user name or password
        '401':
          description: Session NOT allowed
        '409':
          description: User name already in use
                
  /owners/{id}:
    get:
      tags: [BunnyRegistry]
      operationId: getOwner
      summary: Returns an owner
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Owner
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OwnerDTO'
        '204':
          description: Non-public owner and not in session
        '401':
          description: Session required
        '404':
          description: Owner not found
    put:
      tags: [BunnyRegistry]
      operationId: updateOwner
      summary: Updates an existing owner.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Owner to update, missing fields are unchanged
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/OwnerDTO'
      responses:
        '200':
          description: Owner updated
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OwnerDTO'
        '400':
          description: If incoming OwnerDTO has an ID, it must match the path
        '401':
          description: Session required, of approved owner
        '404':
          description: Owner not found
    delete:
      tags: [BunnyRegistry]
      operationId: deleteOwner
      summary: Deletes an owner, removing it as breeder from bunnies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Owner deleted
        '400':
          description: Owner has bunnies
        '401':
          description: Session required, of owner
        '404':
          description: Owner not found
          
  /owners/{id}/deactivate:
    post:
      tags: [BunnyRegistry]
      operationId: deactivateOwner
      summary: Deactivates owner account
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Owner deactivated
        '401':
          description: Session required, of activated owner
        '404':
          description: Owner not found
          
  /owners/{id}/approve:
    post:
      tags: [BunnyRegistry]
      operationId: approveOwner
      summary: Approves storage/usage of owner data.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Owner approved
        '204':
          description: Approval failed
        '307':
          description: Approval ongoing, show Location to user  
        '401':
          description: Session required, of owner
        '404':
          description: Owner not found
          
  /owners/{id}/unapprove:
    post:
      tags: [BunnyRegistry]
      operationId: unapproveOwner
      summary: Revokes approval of storage/usage of owner data.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Owner unapproved
        '401':
          description: Session required, of approved owner
        '404':
          description: Owner not found
          
  /owners/{id}/password:
    put:
      tags: [BunnyRegistry]
      operationId: setPassword
      summary: Sets owner password.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Password data
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/PasswordDTO'
      responses:
        '200':
          description: Password set
        '400':
          description: Invalid new password
        '401':
          description: Session required, of owner
        '404':
          description: Owner not found
          
  /owners/{userName}/recover:
    put:
      tags: [BunnyRegistry]
      operationId: recoverOwner
      summary: Sets owner password.
      parameters:
        - name: userName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Recovery data
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/RecoveryDTO'
      responses:
        '200':
          description: Owner recovered
        '400':
          description: Invalid password
        '401':
          description: Session NOT allowed
        '404':
          description: Owner not found
          
  /owners/{id}/bunnies:
    post:
      tags: [BunnyRegistry]
      operationId: createBunny
      summary: Creates a new owned bunny.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Bunny to create, without ID
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BunnyDTO'
      responses:
        '200':
          description: Bunny created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyDTO'
        '400':
          description: Incoming BunnyDTO must not have an ID and if it has an owner, it must match the path
        '401':
          description: Session required, of approved owner
        '404':
          description: Owner not found
    get:
      tags: [BunnyRegistry]
      operationId: getOwnerBunnies
      summary: Returns the bunnies of an owner
      description: All bunnies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of bunnies
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyList'
        '401':
          description: Session required, of owner
          
  /owners/{owner}/bunnies/claim:
    post:
      tags: [BunnyRegistry]
      operationId: claimBunny
      summary: Claim an existing bunny.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Bunny claim, provided by previous owner.
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BunnyClaimDTO'
      responses:
        '200':
          description: Bunny claimed
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyDTO'
        '400':
          description: If Incoming BunnyDTO has an ID, it must match the path.
        '401':
          description: Session required, of approved owner
        '404':
          description: Owner or bunny not found
          
  /owners/{owner}/bunnies/{bunny}:
    put:
      tags: [BunnyRegistry]
      operationId: updateBunny
      summary: Updates an owned bunny.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: bunny
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Bunny to update, missing fields are unchanged.
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/BunnyDTO'
      responses:
        '200':
          description: Bunny updated
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyDTO'
        '400':
          description: If Incoming BunnyDTO has an ID, it must match the path.
        '401':
          description: Session required, of owner
        '404':
          description: Owner or bunny not found
    delete:
      tags: [BunnyRegistry]
      operationId: deleteBunny
      summary: Deletes a bunny
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: bunny
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Bunny deleted
        '401':
          description: Session required, of approved owner
        '404':
          description: Owner or bunny not found
      
  /owners/{owner}/bunnies/{bunny}/transfer:
    put:
      tags: [BunnyRegistry]
      operationId: transferBunny
      summary: Transfers an owned bunny.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
        - name: bunny
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bunny transfer
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyTransferDTO'
        '400':
          description: If Incoming BunnyDTO has an ID, it must match the path.
        '401':
          description: Session required, of approved owner
        '404':
          description: Owner or bunny not found

  /bunnies:
    get:
      tags: [BunnyRegistry]
      operationId: findBunnies
      summary: Finds bunnies
      description: At least of criteria is required for a result
      parameters:
        - name: identifierLocation
          in: query
          required: true
          description: "Identifier location"
          schema:
            $ref: '#/components/schemas/BunnyIdentifierLocation'
        - name: identifier
          in: query
          required: true
          description: "Identifier template, with ? as wildcard"
          schema:
            type: string
      responses:
        '200':
          description: Bunnies found
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyList'
        '204':
          description: More than 10 bunnies found
        '400':
          description: Location/identifier not provided or more than 2 wildcards
                
  /bunnies/{id}:
    get:
      tags: [BunnyRegistry]
      operationId: getBunny
      summary: Returns a bunny
      description: Any bunny
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bunny
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyDTO'
        '404':
          description: Bunny not found
          
  /bunnies/{id}/reclaim:
    get:
      tags: [BunnyRegistry]
      operationId: reclaimBunny
      summary: Reverts bunny to previous owner
      description: The previous owner can revert a bunny if the new owner is not activated
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ownership reverted
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyDTO'
        '204':
          description: Bunny has no public owner
        '400':
          description: No previous owner
        '401':
          description: Session required, of previous owner
        '404':
          description: Bunny not found
        '409':
          description: Current owner activated
          
  /bunnies/{id}/owner:
    get:
      tags: [BunnyRegistry]
      operationId: getBunnyOwner
      summary: Returns any public owner of the bunny
      description: A private owner can still be accessed using its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Public owner
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyOwnerDTO'
        '204':
          description: Bunny has no public owner
        '404':
          description: Bunny not found or has no owner
          
  /bunnies/{id}/breeder:
    get:
      tags: [BunnyRegistry]
      operationId: getBunnyBreeder
      summary: Returns any public breeder of the bunny
      description: A private breeder can still be accessed using its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Public breeder
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BunnyBreederDTO'
        '204':
          description: Bunny has no public breeder
        '404':
          description: Bunny not found or has no breeder

components:
  schemas:

    BunnyBreederDTO:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          
    BunnyOwnerDTO:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        address:
          type: string
        phone:
          type: string

    OwnerDTO:
      allOf:
        - $ref: '#/components/schemas/BunnyOwnerDTO'
        - type: object
          properties:
            id:
              type: string
              readOnly: true
            breederName:
              type: string
            breederEmail:
              type: string
            userName:
              type: string
            publicOwner:
              type: boolean
            publicBreeder:
              type: boolean
            
    LoginDTO:
       type: object
       required:
         - userName
         - password
       properties:
         userName:
           type: string
           description: Owner user name
         password:
           type: string
           description: Owner password
           
    CreateOwnerDTO:
       type: object
       required:
         - userName
         - password
       properties:
         userName:
           type: string
         password:
           type: string
           
    PasswordDTO:
       type: object
       required:
         - currentPassword
         - newPassword
       properties:
         currentPassword:
           type: string
           description: Must match current password
         newPassword:
           type: string
           description: New password to set
           
    RecoveryDTO:
       type: object
       required:
         - bunnyIdentifier
         - newPassword
       properties:
         bunnyIdentifier:
           $ref: '#/components/schemas/BunnyIdentifierDTO'
         newPassword:
           type: string
           description: New password to set
    
    BunnyIdentifierLocation:
      type: string
      enum:
      - Left Ear
      - Right Ear
      - Chip
      - Ring
      
    BunnyIdentifierDTO:
       type: object
       required:
         - location
         - identifier
       properties:
         location:
           $ref: '#/components/schemas/BunnyIdentifierLocation'
         identifier:
           type: string
           
    BunnyList:
      type: object
      properties:
        bunnies:
          type: array
          items: 
            $ref: '#/components/schemas/BunnyListDTO'
            
    BunnyListDTO:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        leftEar:
          type: string
        rightEar:
          type: string
        chip:
          type: string
        ring:
          type: string
        picture:
          description: URL to picture
          type: string
        claimToken:
          type: string
          readOnly: true
          
    BunnyTransferDTO:
      type: object
      properties:
        claimToken:
          type: string
          
    BunnyClaimDTO:
      type: object
      properties:
        claimToken:
          type: string
          
    BunnyDTO:
      allOf:
        - $ref: '#/components/schemas/BunnyListDTO'
        - type: object
          properties:
            owner:
              type: string
            previousOwner:
              type: string
              readOnly: true
            breeder:
              type: string
            gender:
              type: string
              enum:
                - Female
                - Male
            neutered:
              type: boolean
            birthDate:
              type: string
            race:
              type: string
            coat:
              type: string
            colourMarkings:
              type: string
              
    OfflineSignatureDTO:
      type: object
      required:
        - success
      properties:
        subject:
          type: string
        success:
          type: boolean
